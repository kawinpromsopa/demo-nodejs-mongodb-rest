#!/usr/bin/env groovy

#
# Environment variables
#

// ## DockerHub registry ##
env.registry = "https://hub.docker.com/u/kawinpromsopa";

// ##
env.dockerImage = 'kawinpromsopa/demo-nodejs-mongodb-rest'

// ## Docker Image Tag ##
env.build_tag = 'develop';

// ## Git Source ##
env.GIT_SOURCE = 'https://github.com/kawinpromsopa/demo-nodejs-mongodb-rest.git';

// ## Git Credentials ##
env.GIT_CREDENTIALS_ID = '<CHANGE_ME>';

// ## Git Branch ##
env.GIT_BRANCH = 'master';

#
# main script
#

node (){
    deleteDir()

    stage ("Checkout SCM") {
        try {
            git (
                url: "${env.GIT_SOURCE}",
                credentialsId: "${env.GIT_CREDENTIALS_ID}",
                branch: "${env.GIT_BRANCH}"
            )
            sh "ls -lah"
            currentBuild.result = 'SUCCESS'
        }
        catch (Exception err) {
            currentBuild.result = 'FAILURE'
            env.error = 'Checkout SCM Failed'
        }
    }

    stage ("Build Image") {
        try {
            status = sh (script:"docker build --no-cache -t ${env.registry}:${env.build_tag} . 2>>logResult", returnStatus: true)
            logResult = readFile('logResult').trim()

            if(status == 0) {
                currentBuild.result = 'SUCCESS'
            }
            else {
                println logResult
                currentBuild.result = 'FAILURE'
                sh "exit 1"
            }
        }
        catch(Exception err) {

            currentBuild.result = 'FAILURE'
            env.error = 'Build Image Failed'
        }
    }

    stage ("Push Image") {
        try {
            status = sh (script:"docker push ${env.registry}:${env.build_tag} 2>>logResult", returnStatus: true)
            logResult = readFile('logResult').trim()

            if(status == 0) {
                currentBuild.result = 'SUCCESS'
            }
            else {
                println logResult
                currentBuild.result = 'FAILURE'
                sh "exit 1"
            }
        }
        catch(Exception err) {

            currentBuild.result = 'FAILURE'
            env.error = 'Push Image Failed'
        }
    }

    stage('Deploy') {
        try {
            sh "ssh -i /var/jenkins_home/.ssh/id_rsa ubuntu@<APP_SERVER> docker-compose -f /home/ubuntu/app/docker-compose up -d"
            currentBuild.result = 'SUCCESS'
        }
        catch(Exception err) {
            currentBuild.result = 'FAILURE'
            env.error = 'Deploy Failed'
        }
    }

    stage('Remove Unused docker image') {
        try {
            sh "docker system prune -a -f"
            currentBuild.result = 'SUCCESS'
        }
        catch(Exception err) {
            currentBuild.result = 'FAILURE'
            env.error = 'Remove Unused docker image Failed'
        }
    }
}
